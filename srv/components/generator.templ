// srv/components/generator.templ
package components

import "fmt"

templ GeneratorForm() {
    <div class="generator-container">
        <form 
            id="generator-form" 
            hx-post="/generate" 
            hx-target="#generation-status"
            hx-on::after-request="
                if (event.detail && event.detail.xhr) {
                    const sessionId = event.detail.xhr.getResponseHeader('X-Session-Id');
                    if (sessionId) {
                        sessionManager.setSessionId(sessionId);
                    }
                }
            "
        >
            @messageIntro()
            <textarea 
                name="prompt" 
                required 
                placeholder="Enter your prompt..."
                class="w-full p-2 border rounded"
            ></textarea>
            <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded">
                Generate
            </button>
        </form>
        <div id="generation-status" hx-trigger="load" hx-get="/check-session"></div>
    </div>
}

templ GenerationStatus(sessionID string) {
    if sessionID != "" {
        <div
            id="generation-output"
            class="generation-status"
            data-session-id={ sessionID }
            hx-ext="ws"
            ws-connect={ fmt.Sprintf("/ws/%s", sessionID) }
            _="on htmx:wsClose wait 1s then if #generation-output contains event.target call htmx.trigger(event.target, 'ws-connect')"
        >
            <div id="message-container" class="message-output">
                <div class="loading">Initializing generation...</div>
            </div>
            @messageStyles()
        </div>
    }
}

templ messageContainer(sessionID string) {
    <div 
        id="message-container" 
        class="message-output"
        data-session-id={ sessionID }
        hx-get={ fmt.Sprintf("/api/messages/%s", sessionID) }
        hx-trigger="load delay:500ms, every 2s"
        hx-swap="innerHTML"
    >
        <div class="loading">Loading messages...</div>
    </div>
}

script messageHandling() {
    htmx.on('#generation-output', 'ws-open', function(evt) {
        console.log("WebSocket connected");
        const container = document.getElementById('message-container');
        if (container) {
            container.innerHTML = '<div class="message">Connected to server...</div>';
        }
    });

    htmx.on('#generation-output', 'ws-message', function(evt) {
        const message = JSON.parse(evt.detail.message);
        const container = document.getElementById('message-container');
        if (container) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${message.status}`;
            messageDiv.innerHTML = `
                <div class="message-header">
                    <span>${message.status}</span>
                    <span>${new Date(message.timestamp).toLocaleTimeString()}</span>
                </div>
                ${message.message ? `<p class="message-content">${message.message}</p>` : ''}
                ${message.output ? `<pre class="message-output">${message.output}</pre>` : ''}
            `;
            container.appendChild(messageDiv);
            container.scrollTop = container.scrollHeight;
        }
    });

    htmx.on('#generation-output', 'ws-error', function(evt) {
        console.error("WebSocket error:", evt);
        const container = document.getElementById('message-container');
        if (container) {
            container.innerHTML += '<div class="message error">Connection error</div>';
        }
    });

    htmx.on('#generation-output', 'ws-close', function(evt) {
        console.log("WebSocket closed");
        const container = document.getElementById('message-container');
        if (container) {
            container.innerHTML += '<div class="message">Disconnected from server</div>';
        }
    });
}